apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend-server
  labels:
    app: backend-server
spec:
  replicas: 1
  selector:
    matchLabels:
      app: backend-server
  template:
    metadata:
      labels:
        app: backend-server
    spec:
      containers:
        - name: backend
          image: xeimun/ddoddo-market-backend:v4
          ports:
            - containerPort: 8080
          envFrom:
            - configMapRef:
                name: backend-config
            - secretRef:
                name: backend-secret

          # ✅ 컨테이너가 "완전히 시작될 때까지" 기다려주는 Probe
          # 20초 후부터 /actuator/health 엔드포인트를 10초마다 검사
          # 최대 12번 실패까지 허용 → 총 120초(2분)까지 기다림
          startupProbe:
            httpGet:
              path: /actuator/health
              port: 8080
            initialDelaySeconds: 20
            periodSeconds: 10
            failureThreshold: 12

          # ✅ 컨테이너의 "생존 여부" 확인 Probe
          # 30초 대기 후 /actuator/health/liveness로 요청을 보내고
          # 20초마다 체크하며, 3번 실패 시 Pod를 재시작함
          livenessProbe:
            httpGet:
              path: /actuator/health/liveness
              port: 8080
            initialDelaySeconds: 30
            periodSeconds: 20
            failureThreshold: 3

          # ✅ "서비스 가능 상태"를 확인하는 Probe
          # 15초 후부터 /actuator/health/readiness로 요청
          # DB 연결 등 준비가 끝났을 때만 200 OK로 응답 → 그 전까지는 트래픽 차단
          readinessProbe:
            httpGet:
              path: /actuator/health/readiness
              port: 8080
            initialDelaySeconds: 15
            periodSeconds: 10
            failureThreshold: 3

          # ✅ 컨테이너 자원 요청/제한 설정 → Burstable QoS 등급
          # 최소 0.5 CPU, 512Mi 메모리는 보장하고, 최대 1 CPU, 1Gi 메모리까지만 사용 허용
          resources:
            requests:
              cpu: "500m"       # 최소 보장: 0.5 CPU
              memory: "512Mi"   # 최소 보장: 512 MiB 메모리
            limits:
              cpu: "1"          # 최대 사용 허용: 1 CPU
              memory: "1Gi"     # 최대 사용 허용: 1 GiB 메모리